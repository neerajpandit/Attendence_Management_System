import { useEffect, useState } from 'react';
import CONSTANTS from '../../constants.json';
import Pagination from '../../components/Pagination';
import Search from '../../components/Search';
import Underline from '../../components/Underline';
import { useSearchParams } from 'react-router-dom';
import { Download } from 'lucide-react'; // For invoice icon
import GenerateBillModal from './components/AddBillModel';
const mockBills = [
  {
    _id: '1',
    businessName: 'ABC Traders',
    generatedBy: 'John Doe',
    clientName: 'Client A',
    billDate: '2025-08-10',
    amount: 2500,
  },
  {
    _id: '2',
    businessName: 'XYZ Constructions',
    generatedBy: 'Alice Smith',
    clientName: 'Client B',
    billDate: '2025-08-20',
    amount: 7800,
  },
  {
    _id: '3',
    businessName: 'Green Valley School',
    generatedBy: 'David Johnson',
    clientName: 'Client C',
    billDate: '2025-08-25',
    amount: 5600,
  },
];

const BillListPage = () => {
  const [isModalOpen, setIsModalOpen] = useState(false); // ðŸ‘ˆ track modal open
  const [recallApi, setRecallApi] = useState(false); // ðŸ‘ˆ refresh bills after new bill

  const [searchParams, setSearchParams] = useSearchParams();
  const oPage = searchParams.get('oPage');
  const oSearch = searchParams.get('oSearch');

  const [billList, setBillList] = useState([]);
  const [searchInput, setSearchInput] = useState(oSearch || '');
  const [pagination, setPagination] = useState({
    currentPage: Number(oPage) || 1,
    totalPages: 1,
    totalCount: 0,
    limit: 10,
  });

  // Fetch mock bills
  const fetchBills = (page = 1) => {
    let filtered = mockBills;
    if (searchInput) {
      filtered = filtered.filter((bill) =>
        bill.businessName.toLowerCase().includes(searchInput.toLowerCase())
      );
    }

    setBillList(filtered);
    setPagination({
      currentPage: page,
      totalPages: 1,
      totalCount: filtered.length,
      limit: pagination.limit,
    });
  };

  useEffect(() => {
    fetchBills(pagination.currentPage);
  }, [searchInput, pagination.currentPage]);

  const handleSearch = (value) => {
    setSearchInput(value);
    setPagination((prev) => ({ ...prev, currentPage: 1 }));
    searchParams.set('oSearch', value);
    searchParams.set('oPage', '1');
    setSearchParams(searchParams);
  };

  const handleClearFilters = () => {
    setSearchInput('');
    searchParams.delete('oSearch');
    searchParams.set('oPage', 1);
    setSearchParams(searchParams);
    fetchBills(1);
  };

  const handlePageChange = (page) => {
    if (page >= 1 && page <= pagination.totalPages) {
      setPagination((prev) => ({ ...prev, currentPage: Number(page) || 1 }));
      searchParams.set('oPage', page);
      setSearchParams(searchParams);
    }
  };

  const handleDownloadInvoice = (billId) => {
    // Mock invoice download
    alert(`Downloading invoice for bill ID: ${billId}`);
  };

  return (
    <div className="p-4">
      {/* <div className="flex items-center justify-start mb-5 gap-3">
        <h1 className="text-2xl font-bold text-gray-800">
          <span className="text-primary">Bill</span> Master
        </h1>
      </div> */}

      <Search
        searchInput={searchInput}
        placeHolder="Search Business ..."
        onSearch={handleSearch}
      />
      <div className="flex items-center justify-between mb-5">
        <h1 className="text-2xl font-bold text-gray-800">
          <span className="text-primary">Bill</span> Master
        </h1>
        <button
          onClick={() => setIsModalOpen(true)}
          className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm"
        >
          + Create Bill
        </button>
      </div>
      <div className="flex items-center justify-between gap-5 mb-5">
        <div
          className="text-blue-500 relative cursor-pointer group text-xs font-semibold uppercase"
          onClick={handleClearFilters}
        >
          {CONSTANTS.LINK.CLEAR_FILTERS}
          <Underline />
        </div>
      </div>

      <div className="flex flex-col mb-5">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">ðŸ“„ Bill List</h2>
        <div className="overflow-x-auto rounded-lg shadow-md custom-scrollbar">
          <table className="min-w-full table-auto">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                  Business Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                  Generated By
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                  Client Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                  Bill Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                  Amount
                </th>
                <th className="px-6 py-3"></th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {billList.length === 0 ? (
                <tr>
                  <td
                    colSpan="10"
                    className="text-center py-5 text-xs font-semibold text-gray-500"
                  >
                    {CONSTANTS.NO_DATA_MESSAGE}
                  </td>
                </tr>
              ) : (
                billList.map((bill, index) => (
                  <tr
                    key={bill._id}
                    className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
                  >
                    <td className="px-6 py-4 text-sm text-gray-600">
                      {bill.businessName}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-600">
                      {bill.generatedBy}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-600">
                      {bill.clientName}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-600">
                      {bill.billDate}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-600">
                      â‚¹{bill.amount.toLocaleString()}
                    </td>
                    <td className="px-6 py-4 text-sm font-medium">
                      <button
                        onClick={() => handleDownloadInvoice(bill._id)}
                        className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                      >
                        <Download size={16} /> Download
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
        {isModalOpen && (
          <GenerateBillModal
            closeModal={() => setIsModalOpen(false)}
            setRecallApi={setRecallApi}
            recallApi={recallApi}
          />
        )}

        <Pagination pagination={pagination} onPageChange={handlePageChange} />
      </div>
    </div>
  );
};

export default BillListPage;
